leafletOutput("nematode_map", height = 600),
br(),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
)
),
tabPanel("Climate and Soil",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_soil_climate", height = 250)
),
column(6,
selectInput("x_climate", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range"),
selectInput("y_soil", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity")
)
),
hr(),  # Horizontal line for separation
h4("Climate-Soil Correlation Heatmap"),
plotOutput("heatmap_climate_soil", height = 400)
)
),
tabPanel("Soil and Species",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_species", height = 250)
),
column(6,
selectInput("x_species", "Select Soil Variable",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_species", "Select Nematode Trophic Class",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
),
hr(),
h4("Soil-Species Correlation Heatmap"),
plotOutput("heatmap_soil_species", height = 400)
)
),
tabPanel("Species and Ecosystem Stability",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_stability", height = 250)
),
column(6,
selectInput("x_stability", "Select Nematode Trophic Class",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total"),
selectInput("y_stability", "Select Nematode Functional Diversity Index",
choices = c("enrichment_footprint", "composite_footprint",
"sigma_maturity_index", "channel_index"),
selected = "enrichment_footprint")
)
),
hr(),
h4("Species-Ecosystem Correlation Heatmap"),
plotOutput("heatmap_species_index", height = 400)
)
),
tabPanel("3D Plot",
sidebarLayout(
sidebarPanel(
selectInput("x_axis", "Select X Variable (Soil Properties):",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_axis", "Select Y Variable (Climate Properties):",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range"),
selectInput("z_axis", "Select Z Variable (Trophic Guild):",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
),
mainPanel(
plotlyOutput("plot3D", height = "600px")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " üåç<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " üêõ<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% üìä<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ‚õ∞Ô∏è<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> üèÜ<br>",
"<b>pH:</b> ", p_h, " üå±<br>",
"<b>Moisture:</b> ", moisture, " üíß<br>",
"<b>Conductivity:</b> ", conductivity, " ‚ö°<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE,
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot_soil_climate <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_climate, y = input$y_soil, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Climate vs Soil Properties")
})
output$heatmap_climate_soil <- renderPlot({
ggplot(cor_long, aes(x = Climate_Soil_Var1, y = Climate_Soil_Var2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
geom_text(aes(label = round(Correlation, 2)), size = 4, color = "black") +
labs(title = "Climate-Soil Relationship Heatmap",
x = "Climate Properties",
y = "Soil Properties",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(size= 14, angle = 45, hjust = 1),
axis.text.y = element_text(size= 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot_species <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_species, y = input$y_species, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Soil Properties vs Trophic Guilds")
})
output$heatmap_soil_species <- renderPlot({
ggplot(cor_long_trophic, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
geom_text(aes(label = round(Freq, 2)), size = 4, color = "black") +
labs(title = "Soil Properties vs. Trophic Guilds Correlation Heatmap",
x = "Soil Properties",
y = "Trophic Guilds",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot_stability <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_stability, y = input$y_stability, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Trophic Guilds vs Functional Diversity Index")
})
output$heatmap_species_index <- renderPlot({
ggplot(cor_long_index, aes(x = species_index_Var1, y = species_index_Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
geom_text(aes(label = round(value, 2)), size = 4, color = "black") +
labs(title = "Trophic Guilds vs. Nematode Functional Diversity Index Correlation Heatmap",
x = "Trophic Guilds",
y = "Nematode Functional Diversity Index",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot3D <- renderPlotly({
model <- lm(as.formula(paste(input$z_axis, "~", input$x_axis, "+", input$y_axis)), data = soil)
x_range <- seq(min(soil[[input$x_axis]], na.rm = TRUE), max(soil[[input$x_axis]], na.rm = TRUE), length.out = 20)
y_range <- seq(min(soil[[input$y_axis]], na.rm = TRUE), max(soil[[input$y_axis]], na.rm = TRUE), length.out = 20)
grid <- expand.grid(x = x_range, y = y_range)
colnames(grid) <- c(input$x_axis, input$y_axis)
grid[[input$z_axis]] <- predict(model, newdata = grid)
plot_ly(data = soil,
x = ~get(input$x_axis),
y = ~get(input$y_axis),
z = ~get(input$z_axis),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, color = ~get(input$z_axis), colorscale = "Viridis")) %>%
add_trace(
x = grid[[input$x_axis]],
y = grid[[input$y_axis]],
z = grid[[input$z_axis]],
type = "mesh3d",
opacity = 0.5,
color = "purple"
) %>%
layout(
scene = list(
xaxis = list(title = input$x_axis),
yaxis = list(title = input$y_axis),
zaxis = list(title = input$z_axis)
)
)
})
}
shinyApp(ui, server)
#install.packages("mapdata")
#install.packages("plotly")
library("tidyverse")
library("janitor")
library("naniar")
library("readxl")
library(shiny)
library(shinydashboard)
library(shinythemes)
library(fastmap)
library(plotly)
library(leaflet)
library(mapdata)
library(dplyr)
ui <- fluidPage(theme = shinytheme('flatly'),
navbarPage("Nematode Soil Dashboard",
tabPanel("Map",
fluidPage(
leafletOutput("nematode_map", height = 600),
br(),
selectInput("nematode", "Select Trophic Guild(s):",
choices = unique(nematode$trophic_guild),
selected = unique(nematode$trophic_guild)[1],
multiple = TRUE),
sliderInput("pH_range", "Select pH Range:",
min = min(nematode$p_h, na.rm = TRUE),
max = max(nematode$p_h, na.rm = TRUE),
value = c(min(nematode$p_h, na.rm = TRUE), max(nematode$p_h, na.rm = TRUE))),
sliderInput("moisture_range", "Select Moisture Range:",
min = min(nematode$moisture, na.rm = TRUE),
max = max(nematode$moisture, na.rm = TRUE),
value = c(min(nematode$moisture, na.rm = TRUE), max(nematode$moisture, na.rm = TRUE))),
sliderInput("elevation_range", "Select Elevation Range:",
min = min(nematode$elevation, na.rm = TRUE),
max = max(nematode$elevation, na.rm = TRUE),
value = c(min(nematode$elevation, na.rm = TRUE), max(nematode$elevation, na.rm = TRUE)))
)
),
tabPanel("Climate and Soil",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_soil_climate", height = 250)
),
column(6,
selectInput("x_climate", "Select Climatic Variable:",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range"),
selectInput("y_soil", "Select Soil Variable:",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity")
)
),
hr(),  # Horizontal line for separation
h4("Climate-Soil Correlation Heatmap"),
plotOutput("heatmap_climate_soil", height = 400)
)
),
tabPanel("Soil and Species",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_species", height = 250)
),
column(6,
selectInput("x_species", "Select Soil Variable",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_species", "Select Nematode Trophic Class",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
)
),
hr(),
h4("Soil-Species Correlation Heatmap"),
plotOutput("heatmap_soil_species", height = 400)
)
),
tabPanel("Species and Ecosystem Stability",
fluidPage(
fluidRow(
column(6,
plotOutput("plot_stability", height = 250)
),
column(6,
selectInput("x_stability", "Select Nematode Trophic Class",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total"),
selectInput("y_stability", "Select Nematode Functional Diversity Index",
choices = c("enrichment_footprint", "composite_footprint",
"sigma_maturity_index", "channel_index"),
selected = "enrichment_footprint")
)
),
hr(),
h4("Species-Ecosystem Correlation Heatmap"),
plotOutput("heatmap_species_index", height = 400)
)
),
tabPanel("3D Plot",
sidebarLayout(
sidebarPanel(
selectInput("x_axis", "Select X Variable (Soil Properties):",
choices = c("conductivity", "p_h", "moisture", "temperature"),
selected = "conductivity"),
selectInput("y_axis", "Select Y Variable (Climate Properties):",
choices = c("temperature_annual_range", "precipitation_of_wettest_month",
"precipitation_seasonality", "precipitation_of_driest_month"),
selected = "temperature_annual_range"),
selectInput("z_axis", "Select Z Variable (Trophic Guild):",
choices = c("herbivores_percent_of_total", "fungivores_percent_of_total",
"bacterivores_percent_of_total", "predators_percent_of_total",
"omnivores_percent_of_total"),
selected = "herbivores_percent_of_total")
),
mainPanel(
plotlyOutput("plot3D", height = "600px")
)
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
pal <- colorFactor(palette = c("#E41A1C", "#377EB8", "#FF7F00", "#984EA3", "#F1C40F"),
domain = unique(nematode$trophic_guild))
filtered_data <- reactive({
nematode %>%
filter(trophic_guild %in% input$nematode,
elevation >= input$elevation_range[1] & elevation <= input$elevation_range[2],
p_h >= input$pH_range[1] & p_h <= input$pH_range[2],
moisture >= input$moisture_range[1] & moisture <= input$moisture_range[2],
percent > 0) %>%
left_join(elevation_dominant, by = "elevation_level") %>%
mutate(mean_percent = round(mean_percent, 2))
})
output$nematode_map <- renderLeaflet({
leaflet(filtered_data()) %>%
addTiles() %>%
addCircleMarkers(
~longitude, ~latitude,
color = ~pal(trophic_guild),
fillColor = ~pal(trophic_guild),
fillOpacity = 0.8,
popup = ~paste(
"<b>Site:</b> ", site, " üåç<br>",
"<b>Trophic Guild:</b> ", trophic_guild, " üêõ<br>",
"<b>Percent:</b> ", sprintf("%.2f", percent), "% üìä<br>",
"<b>Elevation:</b> ", elevation, "m <i>(", elevation_level, ")</i> ‚õ∞Ô∏è<br>",
"<b>Dominant Guild at This Elevation:</b> ", mean_percent, "% - <i>", trophic_guild_d, "</i> üèÜ<br>",
"<b>pH:</b> ", p_h, " üå±<br>",
"<b>Moisture:</b> ", moisture, " üíß<br>",
"<b>Conductivity:</b> ", conductivity, " ‚ö°<br>"
),
clusterOptions = markerClusterOptions(spiderfyOnMaxZoom = TRUE,
showCoverageOnHover = FALSE,
zoomToBoundsOnClick = TRUE,
spiderfyDistanceMultiplier = 2)
) %>%
addLegend("topright",
pal = pal,
values = ~trophic_guild,
title = "Trophic Guild",
opacity = 1)
})
output$plot_soil_climate <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_climate, y = input$y_soil, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Climate vs Soil Properties")
})
output$heatmap_climate_soil <- renderPlot({
ggplot(cor_long, aes(x = Climate_Soil_Var1, y = Climate_Soil_Var2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
geom_text(aes(label = round(Correlation, 2)), size = 4, color = "black") +
labs(title = "Climate-Soil Relationship Heatmap",
x = "Climate Properties",
y = "Soil Properties",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(size= 14, angle = 45, hjust = 1),
axis.text.y = element_text(size= 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot_species <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_species, y = input$y_species, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Soil Properties vs Trophic Guilds")
})
output$heatmap_soil_species <- renderPlot({
ggplot(cor_long_trophic, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
geom_text(aes(label = round(Freq, 2)), size = 4, color = "black") +
labs(title = "Soil Properties vs. Trophic Guilds Correlation Heatmap",
x = "Soil Properties",
y = "Trophic Guilds",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot_stability <- renderPlot({
ggplot(data = soil, aes_string(x = input$x_stability, y = input$y_stability, color = "transect")) +
geom_point(na.rm = TRUE) +
theme_light(base_size = 14) +
geom_smooth(method = "lm", se = TRUE, color = "black") +
labs(title = "Trophic Guilds vs Functional Diversity Index")
})
output$heatmap_species_index <- renderPlot({
ggplot(cor_long_index, aes(x = species_index_Var1, y = species_index_Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
geom_text(aes(label = round(value, 2)), size = 4, color = "black") +
labs(title = "Trophic Guilds vs. Nematode Functional Diversity Index Correlation Heatmap",
x = "Trophic Guilds",
y = "Nematode Functional Diversity Index",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 16, face = "bold"))
})
output$plot3D <- renderPlotly({
model <- lm(as.formula(paste(input$z_axis, "~", input$x_axis, "+", input$y_axis)), data = soil)
x_range <- seq(min(soil[[input$x_axis]], na.rm = TRUE), max(soil[[input$x_axis]], na.rm = TRUE), length.out = 20)
y_range <- seq(min(soil[[input$y_axis]], na.rm = TRUE), max(soil[[input$y_axis]], na.rm = TRUE), length.out = 20)
grid <- expand.grid(x = x_range, y = y_range)
colnames(grid) <- c(input$x_axis, input$y_axis)
grid[[input$z_axis]] <- predict(model, newdata = grid)
plot_ly(data = soil,
x = ~get(input$x_axis),
y = ~get(input$y_axis),
z = ~get(input$z_axis),
type = "scatter3d",
mode = "markers",
marker = list(size = 5, color = ~get(input$z_axis), colorscale = "Viridis")) %>%
add_trace(
x = grid[[input$x_axis]],
y = grid[[input$y_axis]],
z = grid[[input$z_axis]],
type = "mesh3d",
opacity = 0.5,
color = "purple"
) %>%
layout(
scene = list(
xaxis = list(title = input$x_axis),
yaxis = list(title = input$y_axis),
zaxis = list(title = input$z_axis)
)
)
})
}
shinyApp(ui, server)
